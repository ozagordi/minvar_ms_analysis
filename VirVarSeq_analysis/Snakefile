# reference and MiSeq samples
import os
import glob
import subprocess
REF = './db/consensus_B.fna'
RECAL_EXE = './recal_fastq.py'
MISEQDIR = '/data/MiSeq/MiSeqOutput/130327_M01274_0011_000000000-A3FJ8/Data/Intensities/BaseCalls'
MIXES = [9, 10, 11, 12, 17, 18, 19, 20]
# this is used to solve the double id in sample names (9_S1, 10_S2 and so on)
for i in MIXES:
    try:
        os.mkdir('fastq_dir_%s' % i)
    except:
        pass
    os.symlink('%s/%d_S%d_L001_R1_001.fastq.gz' % (MISEQDIR, i, i - 8),
               'linked/%d_L001_R1_001.fastq.gz' % (i))

rule all:
    input:
        #'samples.txt'
        #'VirVarSeq.log'
        #'codon_files.txt'
        #expand('sample_{id}.txt', id=MIXES)
        #expand("VirVarSeq_results/mutations/mutations_mapped_{sample}.csv", sample=SAMPLES)
        expand("images/scatter_plot_mix_{id}.pdf", id=MIXES),
        expand("summary/precrec_{id}.csv", id=MIXES)


rule sample_fastq:
    input:
        'linked/{id}_L001_R1_001.fastq.gz'
    output:
        'fastq_dir_{id}/{id}_L001_R1_001.fastq.gz'
    shell:
        'seqtk sample {input} 200000 > {output}'

rule virvarseq_samples:
    input:
        "fastq_dir_{id}/{id}_L001_R1_001.fastq.gz"
    output:
        'sample_{id}.txt'
    run:
        n = "{}".format(output).split('_')[1].split('.')[0]
        with open("{}".format(output), 'w') as h:
            print('%s' % n, file=h)

rule virvarseq:
    input:
        'sample_{id}.txt'
    output:
        'VirVarSeq_results/codon_table/{id}.codon'
    shell:
        '/bin/bash run.sh {input} &> VirVarSeq_{wildcards.id}.log'

rule parse_codon_files:
    input:
        'VirVarSeq_results/codon_table/{id}.codon'
    output:
        "VirVarSeq_results/mutations/mutations_mapped_{id}.csv"
    run:
        shell('./parse_codons.py {input} {output}')

rule plots:
    input:
        "../true_mixes/mix_{id}.csv",
        "VirVarSeq_results/mutations/mutations_mapped_{id}.csv"
    output:
        "images/scatter_plot_mix_{id}.pdf"
    run:
        shell("Rscript scatterplots.R {wildcards.id}")

rule precrec:
    input:
        "VirVarSeq_results/mutations/mutations_mapped_{id}.csv"
    output:
        "summary/precrec_{id}.csv"
    run:
        shell("Rscript precrec.R {wildcards.id}")

onsuccess:
    try:
        os.remove('Rplots.pdf')
    except FileNotFoundError:
        pass
    for i in MIXES:
#        os.remove('fastq_dir_%d/%d_L001_R1_001.fastq.gz' % (i, i))
#        os.rmdir('fastq_dir_%d' % i)
        os.remove('linked/%d_L001_R1_001.fastq.gz' % (i))

onerror:
    try:
        os.remove('Rplots.pdf')
    except FileNotFoundError:
        pass
    for i in MIXES:
#        os.remove('fastq_dir_%d/%d_L001_R1_001.fastq.gz' % (i, i))
#        os.rmdir('fastq_dir_%d' % i)
        os.remove('linked/%d_L001_R1_001.fastq.gz' % (i))
