# reference and MiSeq samples
import os
import glob
REF = './db/consensus_B.fna'
SAMPLESDIR = 'raw_fastq'
RECAL_EXE = './recal_fastq.py'
SAMPLES = ['%d_S%d' % (i, i - 8) for i in [10, 11, 12, 17, 18, 19, 20]]

rule all:
    input:
        #expand("mapped_{sample}/recal_{sample}.fastq", sample=SAMPLES)
        #'samples.txt'
        #'VirVarSeq.log'
        #'codon_files.txt'
        #expand("VirVarSeq_results/mutations/mutations_mapped_{sample}.csv", sample=SAMPLES)
        expand("images/scatter_plot_mix_{id}.pdf", id=[9, 10, 11, 12, 17, 18, 19, 20])

rule refindex:
    input:
        REF
    output:
        "tmpref.bwt"
    shell:
        "bwa index -p tmpref {REF}"

rule align:
    input:
        "/data/MiSeq/MiSeqOutput/130327_M01274_0011_000000000-A3FJ8/Data/Intensities/BaseCalls/{id}_L001_R1_001.fastq.gz",
        "tmpref.bwt"
    output:
        "Sample_mapped_{id}/{id}.bam"
    shell:
        "/bin/bash -c \"bwa mem -t 12 -O 12 tmpref <(seqtk sample {input[0]} 200000) | samtools view -u - | samtools sort -f - {output}\""

rule recal:
    input:
        "Sample_mapped_{id}/{id}.bam"
    output:
        "Sample_mapped_{id}/recal_{id}_L001_R1_001.fastq.gz"
    message:
        "Executing recal on the following files {input}."
    shell:
        "{RECAL_EXE} {input} | gzip - > {output}; rm -f grouped.* known.* subsampled.* recal_data.grp tmpref.*"

rule virvarseq_samples:
    input:
        expand("Sample_mapped_{sample}/recal_{sample}_L001_R1_001.fastq.gz", sample=SAMPLES)
    output:
        'samples.txt'
    run:
        with open('samples.txt', 'w') as h:
            for sample in SAMPLES:
                print('mapped_%s' % sample, file=h)

rule virvarseq:
    input:
        'samples.txt'
    output:
        'VirVarSeq.log'
    shell:
        '/bin/bash run.sh'

rule parse_codon_files:
    input:
        'VirVarSeq.log'
    output:
        'codon_files.txt'
    run:
        with open('codon_files.txt', 'w') as h:
            for f in glob.glob("VirVarSeq_results/mixture_model/mapped_*.codon"):
                print(f, file=h)

rule mutations:
    input:
        "codon_files.txt"
    output:
        expand("VirVarSeq_results/mutations/mutations_mapped_{sample}.csv", sample=SAMPLES)
    run:
        with open('codon_files.txt') as h:
            for l in h:
                smp = os.path.basename(l.strip().split('.')[0])
                shell('./parse_codons.py %s VirVarSeq_results/mutations/mutations_%s.csv' % (l.strip(), smp))

rule plots:
    input:
        "../true_mixes/mix_{id}.csv"
    output:
        "images/scatter_plot_mix_{id}.pdf"
    run:
        for i in [9, 10, 11, 12, 17, 18, 19, 20]:
            shell("Rscript scatterplots.R {i}")
    onsuccess:
        os.remove('Rplots.pdf')
